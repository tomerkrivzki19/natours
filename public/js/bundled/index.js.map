{"mappings":"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","sources":["<anon>","public/js/index.js","public/js/login.js","public/js/alerts.js","public/js/mapbox.js","public/js/updateSettings.js","public/js/stripe.js"],"sourcesContent":["require(\"@babel/polyfill\");\nvar $2QKew$axios = require(\"axios\");\nvar $2QKew$stripestripejs = require(\"@stripe/stripe-js\");\n\n\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n//THIS index.js fille is our entery fille\n//THIS one we kinba get data from the user interface and then we deligate actions to some duntion coming from the others moudles (login moudle ,alerts moudle) , just like in node.js we can now export data from moudles\n// bable libary => make some of the new js fetures work at older broswers\n//npm i @babel/polyfill\n\n\n//function for hiding alerts\nconst $8ac1a60aff7b57bd$export$516836c6a9dfc573 = ()=>{\n    const el = document.querySelector(\".alert\");\n    //js trick where we need to move one level up to the parent element and then from there remove a child on it\n    if (el) el.parentElement.removeChild(el);\n//basic dom manipulation\n};\nconst $8ac1a60aff7b57bd$export$de026b00723010c1 = (type, msg, time = 7)=>{\n    $8ac1a60aff7b57bd$export$516836c6a9dfc573();\n    const markup = `<div class=\"alert alert--${type}\">${msg}</div>`;\n    document.querySelector(\"body\").insertAdjacentHTML(\"afterbegin\", markup); // 'afterbegin' ==> inside ht body but right in the begining\n    //hide all the alerts after 5 secondes\n    window.setTimeout($8ac1a60aff7b57bd$export$516836c6a9dfc573, time, 1000);\n};\n\n\nconst $5705ecc4525cb141$export$596d806903d1f59e = async (email, password)=>{\n    try {\n        // console.log(email, password);\n        // axios => call api instead of resolve reject promisess | we imported the axios package as cdn in the base scripts\n        //resolve -> !(not) response | /api/v1/users/login => we sorted the route becouse we are working on backend and the url in the production and on the development site are the same , if we hade for exmaple rendered app with client side also like react that will not worked\n        const res = await (0, ($parcel$interopDefault($2QKew$axios))).post(\"/api/v1/users/login\", {\n            email: email,\n            password: password\n        });\n        //the data that we send as json response\n        //'success' => when we sending the response we are using success to describe our res, so this is why we chose this here ( where it comes from )\n        if (res.data.status === \"success\") {\n            (0, $8ac1a60aff7b57bd$export$de026b00723010c1)(\"success\", \"Logged in successfully!\");\n            //send to homepage\n            window.setTimeout(()=>{\n                location.assign(\"/\");\n            }, 1500);\n        }\n    } catch (error) {\n        (0, $8ac1a60aff7b57bd$export$de026b00723010c1)(\"error\", error.response.data.message);\n    }\n};\nconst $5705ecc4525cb141$export$a0973bcfe11b05c9 = async ()=>{\n    try {\n        const res = await (0, ($parcel$interopDefault($2QKew$axios))).get(\"/api/v1/users/logout\");\n        // location.reload() => will reload the page |  location.reload(true) => will force a reload the server and not from the broswer\n        if (res.data.status === \"success\") location.reload(true);\n    } catch (error) {\n        console.log(err.response);\n        (0, $8ac1a60aff7b57bd$export$de026b00723010c1)(\"error\", \"Error logging out! Try again .\");\n    }\n};\n\n\n// this is a js fille that we are going to intregate into our html and then will run on the client side\n// console.log('hello from the client side :D');\n//create a export that will take the array of  locations:\nconst $d9e3cc754f0e5bb0$export$4c5dd147b21b9176 = (location)=>{\n    // L => export as namespace L = > the package of the leaflet package\n    var map = L.map(\"map\", {\n        zoomControl: false\n    }); //to disable + - zoom\n    // var map = L.map('map', { zoomControl: false }).setView([31.111745, -118.113491], );\n    L.tileLayer(\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\", {\n        attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors',\n        crossOrigin: \"\"\n    }).addTo(map);\n    //a distract of all the cordinates to the map package usinng foreach + settings for the display and output\n    const points = [];\n    location.forEach((loc)=>{\n        points.push([\n            loc.coordinates[1],\n            loc.coordinates[0]\n        ]);\n        L.marker([\n            loc.coordinates[1],\n            loc.coordinates[0]\n        ]).addTo(map).bindPopup(`<p>Day ${loc.day}: ${loc.description}</p>`, {\n            autoClose: false\n        }).openPopup();\n    });\n    const bounds = L.latLngBounds(points).pad(0.5);\n    map.fitBounds(bounds);\n    map.scrollWheelZoom.disable(); //to disable zoom by mouse wheel\n};\n\n\n//create an update data function here , call that function in index.js (export and import inside index.js fille )\n//\n\n\nconst $7f4d2ce77e9fd4e6$export$f558026a994b6051 = async (data, type)=>{\n    try {\n        const url = type === \"password\" ? \"/api/v1/users/updateMyPassword\" : \"/api/v1/users/updateMe\";\n        //WHY THIS WAY DIDNT WOKR!\n        // const res = await axios.patch(url, {\n        //   data,\n        // });\n        // When you use axios like this for JSON data:\n        // const res = await axios.patch(url, {\n        //   name: 'John Doe',\n        //   email: 'john.doe@example.com',\n        // });\n        // it works fine because axios automatically sets the Content-Type to application/json and sends the data in the appropriate JSON format.\n        //JSON data does not require the special handling that FormData requires.\n        const res = await (0, ($parcel$interopDefault($2QKew$axios)))({\n            method: \"PATCH\",\n            url: url,\n            data: data,\n            headers: {\n            }\n        });\n        if (res.data.status === \"success\") (0, $8ac1a60aff7b57bd$export$de026b00723010c1)(\"success\", `${type.toUpperCase()} updated successfully!`);\n        return;\n    } catch (error) {\n        (0, $8ac1a60aff7b57bd$export$de026b00723010c1)(\"error\", error.response.data.message);\n        return;\n    }\n};\n\n\n//now here we need access to the stripe libary again , the package that we insalled before (stripe npm package -used on the backend  ) is only works for the backend\n//and what we need to do on the fronted is actually inculde a scrip on the html ,\n//we added the scripe to the head :   script(src=\"https://js.stripe.com/v3/\" async)\n//and now we can use that in the fronted\n\n\n\nconst $ed6ef5de01a249db$export$8d5bdbf26681c0c2 = async (tourId)=>{\n    try {\n        const stripe = await (0, $2QKew$stripestripejs.loadStripe)(\"pk_test_51POKHYITotoxTOIR7OiWCh0dpgMYHwuTJi7KKmS5dCN3Vu381hkLpjnnrbB7WkWQpYfFLtkwOstv9HtWLolTvaAh00zJytBK7N\");\n        //the object we get from the script in the pug tamplate\n        //1) Get checkout session from API\n        const session = await (0, ($parcel$interopDefault($2QKew$axios)))(`/api/v1/bookings/checkout-session/${tourId}`);\n        //needs to return a checkout session\n        // console.log(session);\n        //2) Create checkout form + charge credit card\n        await stripe.redirectToCheckout({\n            sessionId: session.data.session.id\n        });\n    //now the user is proccesed to the checkout page where she provide his credit card details ,d\n    //for testing in stripe we using thier credit card for testing\n    //4242 4242 4242 4242\n    // any date valid |   222 -any num\n    //any name\n    //we have the option in sprite to send emails for success payments -meaning we dont have to manually emails when the purchest is succesfull\n    } catch (error) {\n        console.log(error);\n        (0, $8ac1a60aff7b57bd$export$de026b00723010c1)(\"error\", error);\n    }\n};\n\n\n\n// console.log('Hello from parcel'); -> check if the fille work\n// FIXEME: having problem with the mapbox when entering to a tour\n//DOM ELEMNTS :\nconst $63f537e374eb8f61$var$mapbox = document.getElementById(\"map\");\nconst $63f537e374eb8f61$var$loginForm = document.querySelector(\".form--login\");\nconst $63f537e374eb8f61$var$logOutBtn = document.querySelector(\".nav__el--logout\");\nconst $63f537e374eb8f61$var$updateUserForm = document.querySelector(\".form-user-data\");\nconst $63f537e374eb8f61$var$updateUserPasswordForm = document.querySelector(\".form-user-password\");\nconst $63f537e374eb8f61$var$bookBtn = document.getElementById(\"book-tour\");\n// dataset =>  read-only property of the HTMLElement interface provides read/write access to custom data attributes (data-*) on elements\n//DELEGATION:\nif ($63f537e374eb8f61$var$mapbox) {\n    //extract the data from the div , what we have done in the pug tamplate - we display all the data in the div classname\n    const locations = JSON.parse($63f537e374eb8f61$var$mapbox.dataset.locations);\n    (0, $d9e3cc754f0e5bb0$export$4c5dd147b21b9176)(locations);\n}\nif ($63f537e374eb8f61$var$loginForm) $63f537e374eb8f61$var$loginForm.addEventListener(\"submit\", (e)=>{\n    e.preventDefault();\n    const email = document.getElementById(\"email\").value;\n    const password = document.getElementById(\"password\").value;\n    (0, $5705ecc4525cb141$export$596d806903d1f59e)(email, password); //check if the err is provided when faield TODO:\n});\nelse console.error(\"Form element not found\");\nif ($63f537e374eb8f61$var$logOutBtn) $63f537e374eb8f61$var$logOutBtn.addEventListener(\"click\", (0, $5705ecc4525cb141$export$a0973bcfe11b05c9));\nif ($63f537e374eb8f61$var$updateUserForm) //not sending nothing and recives nothing err\n$63f537e374eb8f61$var$updateUserForm.addEventListener(\"submit\", (e)=>{\n    e.preventDefault();\n    // const name = document.getElementById('name').value;\n    // const email = document.getElementById('email').value;\n    // we change it becouse we want to use also the upload photo setting and that is inside that form\n    const form = new FormData(); //FormData - recreate multipart form data\n    form.append(\"name\", document.getElementById(\"name\").value);\n    form.append(\"email\", document.getElementById(\"email\").value);\n    form.append(\"photo\", document.getElementById(\"photo\").files[0]); //that comes as an array , in for that we need to collect only the first fille that is the image the user uploaded\n    // console.log(document.getElementById('name').value);\n    // console.log(document.getElementById('email').value);\n    // console.log(document.getElementById('photo').files[0]);\n    (0, $7f4d2ce77e9fd4e6$export$f558026a994b6051)(form, \"data\");\n});\nif ($63f537e374eb8f61$var$updateUserPasswordForm) $63f537e374eb8f61$var$updateUserPasswordForm.addEventListener(\"submit\", async (e)=>{\n    e.preventDefault();\n    document.querySelector(\".btn--save-password\").textContent = \"Updating...\";\n    const passwordCurrent = document.getElementById(\"password-current\").value;\n    const password = document.getElementById(\"password\").value;\n    const passwordConfirm = document.getElementById(\"password-confirm\").value;\n    await (0, $7f4d2ce77e9fd4e6$export$f558026a994b6051)({\n        passwordCurrent: passwordCurrent,\n        password: password,\n        passwordConfirm: passwordConfirm\n    }, \"password\");\n});\n//from the postman route that we have already build - to compare if the same detaills is simmilar\n// {\n//   \"passwordCurrent\":\"pass1234\",\n//   \"password\":\"newpassword\",\n//   \"passwordConfirm\":\"newpassword\"\n// }\nif ($63f537e374eb8f61$var$bookBtn) $63f537e374eb8f61$var$bookBtn.addEventListener(\"click\", (e)=>{\n    e.target.textContent = \"Processing...\";\n    const { tourId: tourId } = e.target.dataset; //e.target=> the element that was clicked - will be the button element\n    (0, $ed6ef5de01a249db$export$8d5bdbf26681c0c2)(tourId);\n});\nconst $63f537e374eb8f61$var$alertsMessage = document.querySelector(\"body\").dataset.alert;\nif (alert) (0, $8ac1a60aff7b57bd$export$de026b00723010c1)(\"success\", $63f537e374eb8f61$var$alertsMessage, 20);\n\n\n//# sourceMappingURL=index.js.map\n","//THIS index.js fille is our entery fille\r\n//THIS one we kinba get data from the user interface and then we deligate actions to some duntion coming from the others moudles (login moudle ,alerts moudle) , just like in node.js we can now export data from moudles\r\n\r\n// bable libary => make some of the new js fetures work at older broswers\r\n//npm i @babel/polyfill\r\nimport '@babel/polyfill';\r\nimport { login, logout } from './login';\r\nimport { displayMap } from './mapbox';\r\nimport { updateSettings } from './updateSettings';\r\nimport { bookTour } from './stripe';\r\nimport { showAlert } from './alerts';\r\n\r\n// console.log('Hello from parcel'); -> check if the fille work\r\n\r\n// FIXEME: having problem with the mapbox when entering to a tour\r\n\r\n//DOM ELEMNTS :\r\nconst mapbox = document.getElementById('map');\r\nconst loginForm = document.querySelector('.form--login');\r\nconst logOutBtn = document.querySelector('.nav__el--logout');\r\nconst updateUserForm = document.querySelector('.form-user-data');\r\nconst updateUserPasswordForm = document.querySelector('.form-user-password');\r\nconst bookBtn = document.getElementById('book-tour');\r\n\r\n// dataset =>  read-only property of the HTMLElement interface provides read/write access to custom data attributes (data-*) on elements\r\n//DELEGATION:\r\nif (mapbox) {\r\n  //extract the data from the div , what we have done in the pug tamplate - we display all the data in the div classname\r\n  const locations = JSON.parse(mapbox.dataset.locations);\r\n  displayMap(locations);\r\n}\r\n\r\nif (loginForm) {\r\n  loginForm.addEventListener('submit', (e) => {\r\n    e.preventDefault();\r\n    const email = document.getElementById('email').value;\r\n    const password = document.getElementById('password').value;\r\n    login(email, password); //check if the err is provided when faield TODO:\r\n  });\r\n} else {\r\n  console.error('Form element not found');\r\n}\r\n\r\nif (logOutBtn) logOutBtn.addEventListener('click', logout);\r\n\r\nif (updateUserForm) {\r\n  //not sending nothing and recives nothing err\r\n  updateUserForm.addEventListener('submit', (e) => {\r\n    e.preventDefault();\r\n    // const name = document.getElementById('name').value;\r\n    // const email = document.getElementById('email').value;\r\n    // we change it becouse we want to use also the upload photo setting and that is inside that form\r\n    const form = new FormData(); //FormData - recreate multipart form data\r\n    form.append('name', document.getElementById('name').value);\r\n    form.append('email', document.getElementById('email').value);\r\n    form.append('photo', document.getElementById('photo').files[0]); //that comes as an array , in for that we need to collect only the first fille that is the image the user uploaded\r\n\r\n    // console.log(document.getElementById('name').value);\r\n    // console.log(document.getElementById('email').value);\r\n    // console.log(document.getElementById('photo').files[0]);\r\n\r\n    updateSettings(form, 'data');\r\n  });\r\n}\r\nif (updateUserPasswordForm) {\r\n  updateUserPasswordForm.addEventListener('submit', async (e) => {\r\n    e.preventDefault();\r\n    document.querySelector('.btn--save-password').textContent = 'Updating...';\r\n    const passwordCurrent = document.getElementById('password-current').value;\r\n    const password = document.getElementById('password').value;\r\n    const passwordConfirm = document.getElementById('password-confirm').value;\r\n\r\n    await updateSettings(\r\n      { passwordCurrent, password, passwordConfirm },\r\n      'password'\r\n    );\r\n  });\r\n}\r\n//from the postman route that we have already build - to compare if the same detaills is simmilar\r\n// {\r\n//   \"passwordCurrent\":\"pass1234\",\r\n//   \"password\":\"newpassword\",\r\n//   \"passwordConfirm\":\"newpassword\"\r\n// }\r\n\r\nif (bookBtn) {\r\n  bookBtn.addEventListener('click', (e) => {\r\n    e.target.textContent = 'Processing...';\r\n    const { tourId } = e.target.dataset; //e.target=> the element that was clicked - will be the button element\r\n    bookTour(tourId);\r\n  });\r\n}\r\n\r\nconst alertsMessage = document.querySelector('body').dataset.alert;\r\nif (alert) showAlert('success', alertsMessage, 20);\r\n","import axios from 'axios';\r\nimport { showAlert } from './alerts';\r\n\r\nexport const login = async (email, password) => {\r\n  try {\r\n    // console.log(email, password);\r\n    // axios => call api instead of resolve reject promisess | we imported the axios package as cdn in the base scripts\r\n    //resolve -> !(not) response | /api/v1/users/login => we sorted the route becouse we are working on backend and the url in the production and on the development site are the same , if we hade for exmaple rendered app with client side also like react that will not worked\r\n    const res = await axios.post('/api/v1/users/login', {\r\n      email,\r\n      password,\r\n    });\r\n    //the data that we send as json response\r\n    //'success' => when we sending the response we are using success to describe our res, so this is why we chose this here ( where it comes from )\r\n    if (res.data.status === 'success') {\r\n      showAlert('success', 'Logged in successfully!');\r\n\r\n      //send to homepage\r\n      window.setTimeout(() => {\r\n        location.assign('/');\r\n      }, 1500);\r\n    }\r\n  } catch (error) {\r\n    showAlert('error', error.response.data.message);\r\n  }\r\n};\r\n\r\nexport const logout = async () => {\r\n  try {\r\n    const res = await axios.get('/api/v1/users/logout');\r\n    // location.reload() => will reload the page |  location.reload(true) => will force a reload the server and not from the broswer\r\n    if (res.data.status === 'success') location.reload(true);\r\n  } catch (error) {\r\n    console.log(err.response);\r\n    showAlert('error', 'Error logging out! Try again .');\r\n  }\r\n};\r\n","//function for hiding alerts\r\nexport const hideAlert = () => {\r\n  const el = document.querySelector('.alert');\r\n  //js trick where we need to move one level up to the parent element and then from there remove a child on it\r\n  if (el) el.parentElement.removeChild(el);\r\n  //basic dom manipulation\r\n};\r\n// type is 'success' or 'error' |time => if we will add that to the argumant and specife it with a diffrent number then it will overweite the default\r\nexport const showAlert = (type, msg, time = 7) => {\r\n  hideAlert();\r\n  const markup = `<div class=\"alert alert--${type}\">${msg}</div>`;\r\n  document.querySelector('body').insertAdjacentHTML('afterbegin', markup); // 'afterbegin' ==> inside ht body but right in the begining\r\n\r\n  //hide all the alerts after 5 secondes\r\n  window.setTimeout(hideAlert, time, 1000);\r\n};\r\n","// this is a js fille that we are going to intregate into our html and then will run on the client side\r\n// console.log('hello from the client side :D');\r\n\r\n//create a export that will take the array of  locations:\r\nexport const displayMap = (location) => {\r\n  // L => export as namespace L = > the package of the leaflet package\r\n  var map = L.map('map', { zoomControl: false }); //to disable + - zoom\r\n  // var map = L.map('map', { zoomControl: false }).setView([31.111745, -118.113491], );\r\n\r\n  L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\r\n    attribution:\r\n      '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors',\r\n    crossOrigin: '',\r\n  }).addTo(map);\r\n\r\n  //a distract of all the cordinates to the map package usinng foreach + settings for the display and output\r\n  const points = [];\r\n  location.forEach((loc) => {\r\n    points.push([loc.coordinates[1], loc.coordinates[0]]);\r\n    L.marker([loc.coordinates[1], loc.coordinates[0]])\r\n      .addTo(map)\r\n      .bindPopup(`<p>Day ${loc.day}: ${loc.description}</p>`, {\r\n        autoClose: false,\r\n      })\r\n      .openPopup();\r\n  });\r\n\r\n  const bounds = L.latLngBounds(points).pad(0.5);\r\n  map.fitBounds(bounds);\r\n\r\n  map.scrollWheelZoom.disable(); //to disable zoom by mouse wheel\r\n};\r\n","//create an update data function here , call that function in index.js (export and import inside index.js fille )\r\n//\r\nimport axios from 'axios';\r\nimport { showAlert } from './alerts';\r\n\r\n//update both data and the password\r\n//type is either 'password' or 'data' , data => an object with al the data to update\r\nexport const updateSettings = async (data, type) => {\r\n  try {\r\n    const url =\r\n      type === 'password'\r\n        ? '/api/v1/users/updateMyPassword'\r\n        : '/api/v1/users/updateMe';\r\n\r\n    //WHY THIS WAY DIDNT WOKR!\r\n    // const res = await axios.patch(url, {\r\n    //   data,\r\n    // });\r\n    // When you use axios like this for JSON data:\r\n    // const res = await axios.patch(url, {\r\n    //   name: 'John Doe',\r\n    //   email: 'john.doe@example.com',\r\n    // });\r\n\r\n    // it works fine because axios automatically sets the Content-Type to application/json and sends the data in the appropriate JSON format.\r\n    //JSON data does not require the special handling that FormData requires.\r\n\r\n    const res = await axios({\r\n      method: 'PATCH',\r\n      url: url,\r\n      data: data, // Send FormData directly\r\n      headers: {\r\n        // Let the browser set the correct Content-Type with boundary\r\n      },\r\n    });\r\n\r\n    if (res.data.status === 'success') {\r\n      showAlert('success', `${type.toUpperCase()} updated successfully!`);\r\n    }\r\n    return;\r\n  } catch (error) {\r\n    showAlert('error', error.response.data.message);\r\n    return;\r\n  }\r\n};\r\n","//now here we need access to the stripe libary again , the package that we insalled before (stripe npm package -used on the backend  ) is only works for the backend\r\n//and what we need to do on the fronted is actually inculde a scrip on the html ,\r\n\r\n//we added the scripe to the head :   script(src=\"https://js.stripe.com/v3/\" async)\r\n//and now we can use that in the fronted\r\nimport axios from 'axios';\r\nimport { showAlert } from './alerts';\r\nimport { loadStripe } from '@stripe/stripe-js';\r\n\r\nexport const bookTour = async (tourId) => {\r\n  try {\r\n    const stripe = await loadStripe(\r\n      'pk_test_51POKHYITotoxTOIR7OiWCh0dpgMYHwuTJi7KKmS5dCN3Vu381hkLpjnnrbB7WkWQpYfFLtkwOstv9HtWLolTvaAh00zJytBK7N'\r\n    );\r\n    //the object we get from the script in the pug tamplate\r\n    //1) Get checkout session from API\r\n    const session = await axios(`/api/v1/bookings/checkout-session/${tourId}`);\r\n    //needs to return a checkout session\r\n    // console.log(session);\r\n\r\n    //2) Create checkout form + charge credit card\r\n    await stripe.redirectToCheckout({\r\n      sessionId: session.data.session.id,\r\n    });\r\n    //now the user is proccesed to the checkout page where she provide his credit card details ,d\r\n    //for testing in stripe we using thier credit card for testing\r\n    //4242 4242 4242 4242\r\n    // any date valid |   222 -any num\r\n    //any name\r\n\r\n    //we have the option in sprite to send emails for success payments -meaning we dont have to manually emails when the purchest is succesfull\r\n  } catch (error) {\r\n    console.log(error);\r\n    showAlert('error', error);\r\n  }\r\n};\r\n"],"names":["require","$2QKew$axios","$2QKew$stripestripejs","$parcel$interopDefault","a","__esModule","default","$8ac1a60aff7b57bd$export$516836c6a9dfc573","el","document","querySelector","parentElement","removeChild","$8ac1a60aff7b57bd$export$de026b00723010c1","type","msg","time","markup","insertAdjacentHTML","window","setTimeout","$5705ecc4525cb141$export$596d806903d1f59e","email","password","res","post","data","status","location","assign","error","response","message","$5705ecc4525cb141$export$a0973bcfe11b05c9","get","reload","console","log","err","$7f4d2ce77e9fd4e6$export$f558026a994b6051","url","method","headers","toUpperCase","$ed6ef5de01a249db$export$8d5bdbf26681c0c2","tourId","stripe","loadStripe","session","redirectToCheckout","sessionId","id","$63f537e374eb8f61$var$mapbox","getElementById","$63f537e374eb8f61$var$loginForm","$63f537e374eb8f61$var$logOutBtn","$63f537e374eb8f61$var$updateUserForm","$63f537e374eb8f61$var$updateUserPasswordForm","$63f537e374eb8f61$var$bookBtn","map","L","zoomControl","tileLayer","attribution","crossOrigin","addTo","points","forEach","loc","push","coordinates","marker","bindPopup","day","description","autoClose","openPopup","bounds","latLngBounds","pad","fitBounds","scrollWheelZoom","disable","JSON","parse","dataset","locations","addEventListener","e","preventDefault","value","form","FormData","append","files","textContent","passwordCurrent","passwordConfirm","target","$63f537e374eb8f61$var$alertsMessage","alert"],"version":3,"file":"index.js.map","sourceRoot":"../../../"}